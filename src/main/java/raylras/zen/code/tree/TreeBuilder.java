package raylras.zen.code.tree;

import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.tree.TerminalNode;
import raylras.zen.code.Range;
import raylras.zen.code.parser.ZenScriptLexer;
import raylras.zen.code.parser.ZenScriptParser;
import raylras.zen.code.parser.ZenScriptParserBaseVisitor;
import raylras.zen.code.tree.expr.*;
import raylras.zen.code.tree.stmt.*;
import raylras.zen.code.type.*;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Class used to build an Abstract Syntax Tree (AST)
 * from a Concrete Syntax Tree (CST) generated by ANTLR4.
 */
public class TreeBuilder extends ZenScriptParserBaseVisitor<Object> {

    /* Internals */

    private static final int ANTLR4_START_LINE = 1;
    private static final int ANTLR4_START_COLUM = 0;
    private static final int LINE_OFFSET = Range.FIRST_LINE - ANTLR4_START_LINE;
    private static final int COLUMN_OFFSET = Range.FIRST_COLUMN - ANTLR4_START_COLUM;

    private static Range getRange(ParserRuleContext cst) {
        if (cst == null) return null;
        return new Range(cst.start.getLine() + LINE_OFFSET,
                cst.start.getCharPositionInLine() + COLUMN_OFFSET,
                cst.stop.getLine() + LINE_OFFSET,
                cst.stop.getCharPositionInLine() + cst.stop.getText().length() + COLUMN_OFFSET);
    }

    private static Range getRange(TerminalNode cst) {
        if (cst == null) return null;
        return new Range(cst.getSymbol().getLine() + LINE_OFFSET,
                cst.getSymbol().getCharPositionInLine() + COLUMN_OFFSET,
                cst.getSymbol().getLine() + LINE_OFFSET,
                cst.getSymbol().getCharPositionInLine() + cst.getText().length() + COLUMN_OFFSET);
    }

    private Name getName(TerminalNode node) {
        if (node == null) return null;
        return new Name(node.getText(), getRange(node));
    }

    private Unary.Operator getUnaryOp(Token token) {
        if (token == null) return null;
        switch (token.getType()) {
            case ZenScriptLexer.NOT:
                return Unary.Operator.NOT;

            case ZenScriptLexer.ADD:
                return Unary.Operator.POS;

            case ZenScriptLexer.SUB:
                return Unary.Operator.NEG;

            default:
                return Unary.Operator.INVALID;
        }
    }

    private Binary.Operator getBinaryOp(Token token) {
        if (token == null) return null;
        switch (token.getType()) {
            case ZenScriptLexer.ADD:
                return Binary.Operator.ADD;

            case ZenScriptLexer.SUB:
                return Binary.Operator.SUB;

            case ZenScriptLexer.MUL:
                return Binary.Operator.MUL;

            case ZenScriptLexer.DIV:
                return Binary.Operator.DIV;

            default:
                return Binary.Operator.INVALID;
        }
    }

    private Assignment.Operator getAssignOp(Token token) {
        if (token == null) return null;
        switch (token.getType()) {
            case ZenScriptLexer.ASSIGN:
                return Assignment.Operator.ASSIGN;

            case ZenScriptLexer.ADD_ASSIGN:
                return Assignment.Operator.ADD_ASSIGN;

            case ZenScriptLexer.SUB_ASSIGN:
                return Assignment.Operator.SUB_ASSIGN;

            case ZenScriptLexer.MUL_ASSIGN:
                return Assignment.Operator.MUL_ASSIGN;

            case ZenScriptLexer.DIV_ASSIGN:
                return Assignment.Operator.DIV_ASSIGN;

            default:
                return Assignment.Operator.INVALID;
        }
    }

    private Declarator getDeclarator(Token token) {
        if (token == null) return null;
        switch (token.getType()) {
            case ZenScriptLexer.VAR:
                return Declarator.VAR;

            case ZenScriptLexer.VAL:
                return Declarator.VAL;

            case ZenScriptLexer.STATIC:
                return Declarator.STATIC;

            case ZenScriptLexer.GLOBAL:
                return Declarator.GLOBAL;

            default:
                return Declarator.NONE;
        }
    }

    private Type getType(ZenScriptParser.TypeLiteralContext ctx) {
        if (ctx == null) return null;
        TypeLiteral literal = visitTypeLiteral(ctx);
        if (literal == null) return null;
        return literal.type;
    }

    private List<Type> getTypeList(ZenScriptParser.TypeLiteralListContext ctx) {
        if (ctx == null) return Collections.emptyList();
        return visitTypeLiteralList(ctx).stream().map(literal -> literal.type).filter(Objects::nonNull).collect(Collectors.toList());
    }

    /* End Internals */

    @Override
    public CompilationUnit visitCompilationUnit(ZenScriptParser.CompilationUnitContext ctx) {
        if (ctx == null) return null;
        List<ImportDecl> imports = ctx.importDeclaration().stream().map(this::visitImportDeclaration).filter(Objects::nonNull).collect(Collectors.toList());
        List<ClassDecl> classes = ctx.classDeclaration().stream().map(this::visitClassDeclaration).filter(Objects::nonNull).collect(Collectors.toList());
        List<FunctionDecl> functions = ctx.functionDeclaration().stream().map(this::visitFunctionDeclaration).filter(Objects::nonNull).collect(Collectors.toList());
        List<Statement> statements = ctx.statement().stream().map(this::visitStatement).filter(Objects::nonNull).collect(Collectors.toList());
        Range range = getRange(ctx);
        return new CompilationUnit(imports, classes, functions, statements, range);
    }

    @Override
    public ImportDecl visitImportDeclaration(ZenScriptParser.ImportDeclarationContext ctx) {
        if (ctx == null) return null;
        List<Name> fullName = visitClassName(ctx.className());
        Name alias = visitAlias(ctx.alias());
        Range range = getRange(ctx);
        return new ImportDecl(fullName, alias, range);
    }

    @Override
    public List<Name> visitClassName(ZenScriptParser.ClassNameContext ctx) {
        if (ctx == null) return Collections.emptyList();
        return ctx.IDENTIFIER().stream().map(this::getName).filter(Objects::nonNull).collect(Collectors.toList());
    }

    @Override
    public Name visitAlias(ZenScriptParser.AliasContext ctx) {
        if (ctx == null) return null;
        return getName(ctx.IDENTIFIER());
    }

    @Override
    public FunctionDecl visitFunctionDeclaration(ZenScriptParser.FunctionDeclarationContext ctx) {
        if (ctx == null) return null;
        Name name = getName(ctx.IDENTIFIER());
        List<ParameterDecl> params = visitParameterList(ctx.parameterList());
        TypeLiteral returnType = visitTypeLiteral(ctx.typeLiteral());
        List<Statement> statements = visitFunctionBody(ctx.functionBody());
        Range range = getRange(ctx);
        return new FunctionDecl(name, params, returnType, statements, range);
    }

    @Override
    public List<ParameterDecl> visitParameterList(ZenScriptParser.ParameterListContext ctx) {
        if (ctx == null) return Collections.emptyList();
        return ctx.parameter().stream().map(this::visitParameter).filter(Objects::nonNull).collect(Collectors.toList());
    }

    @Override
    public ParameterDecl visitParameter(ZenScriptParser.ParameterContext ctx) {
        if (ctx == null) return null;
        Name name = getName(ctx.IDENTIFIER());
        TypeLiteral typeDecl = visitTypeLiteral(ctx.typeLiteral());
        Expression defaultValue = visitDefaultValue(ctx.defaultValue());
        Range range = getRange(ctx);
        return new ParameterDecl(name, typeDecl, defaultValue, range);
    }

    @Override
    public Expression visitDefaultValue(ZenScriptParser.DefaultValueContext ctx) {
        if (ctx == null) return null;
        return visitExpression(ctx.expression());
    }

    @Override
    public List<Statement> visitFunctionBody(ZenScriptParser.FunctionBodyContext ctx) {
        if (ctx == null) return Collections.emptyList();
        return ctx.statement().stream().map(this::visitStatement).filter(Objects::nonNull).collect(Collectors.toList());
    }

    @Override
    public ClassDecl visitClassDeclaration(ZenScriptParser.ClassDeclarationContext ctx) {
        if (ctx == null) return null;
        Name name = getName(ctx.IDENTIFIER());
        List<VariableDecl> fields = ctx.variableDeclaration().stream().map(this::visitVariableDeclaration).filter(Objects::nonNull).collect(Collectors.toList());
        List<ConstructorDecl> constructors = ctx.constructorDeclaration().stream().map(this::visitConstructorDeclaration).filter(Objects::nonNull).collect(Collectors.toList());
        List<FunctionDecl> methods = ctx.functionDeclaration().stream().map(this::visitFunctionDeclaration).filter(Objects::nonNull).collect(Collectors.toList());
        Range range = getRange(ctx);
        return new ClassDecl(name, fields, constructors, methods, range);
    }

    @Override
    public ConstructorDecl visitConstructorDeclaration(ZenScriptParser.ConstructorDeclarationContext ctx) {
        if (ctx == null) return null;
        Name name = getName(ctx.ZEN_CONSTRUCTOR());
        List<ParameterDecl> params = visitParameterList(ctx.parameterList());
        List<Statement> statements = visitConstructorBody(ctx.constructorBody());
        Range range = getRange(ctx);
        return new ConstructorDecl(name, params, statements, range);
    }

    @Override
    public List<Statement> visitConstructorBody(ZenScriptParser.ConstructorBodyContext ctx) {
        if (ctx == null) return Collections.emptyList();
        return ctx.statement().stream().map(this::visitStatement).filter(Objects::nonNull).collect(Collectors.toList());
    }

    @Override
    public VariableDecl visitVariableDeclaration(ZenScriptParser.VariableDeclarationContext ctx) {
        if (ctx == null) return null;
        Declarator declarator = getDeclarator(ctx.Declarator);
        Name name = getName(ctx.IDENTIFIER());
        TypeLiteral typeDecl = visitTypeLiteral(ctx.typeLiteral());
        Expression init = visitInitializer(ctx.initializer());
        Range range = getRange(ctx);
        return new VariableDecl(declarator, name, typeDecl, init, range);
    }

    @Override
    public Expression visitInitializer(ZenScriptParser.InitializerContext ctx) {
        if (ctx == null) return null;
        return visitExpression(ctx.expression());
    }

    @Override
    public Statement visitStatement(ZenScriptParser.StatementContext ctx) {
        if (ctx == null) return null;
        return (Statement) visitChildren(ctx);
    }

    @Override
    public Block visitBlockStatement(ZenScriptParser.BlockStatementContext ctx) {
        if (ctx == null) return null;
        List<Statement> statements = ctx.statement().stream().map(this::visitStatement).filter(Objects::nonNull).collect(Collectors.toList());
        Range range = getRange(ctx);
        return new Block(statements, range);
    }

    @Override
    public Return visitReturnStatement(ZenScriptParser.ReturnStatementContext ctx) {
        if (ctx == null) return null;
        Expression expr = visitExpression(ctx.expression());
        Range range = getRange(ctx);
        return new Return(expr, range);
    }

    @Override
    public Break visitBreakStatement(ZenScriptParser.BreakStatementContext ctx) {
        if (ctx == null) return null;
        Range range = getRange(ctx);
        return new Break(range);
    }

    @Override
    public Continue visitContinueStatement(ZenScriptParser.ContinueStatementContext ctx) {
        if (ctx == null) return null;
        Range range = getRange(ctx);
        return new Continue(range);
    }

    @Override
    public If visitIfStatement(ZenScriptParser.IfStatementContext ctx) {
        if (ctx == null) return null;
        Expression condition = visitExpression(ctx.expression());
        Statement thenPart = visitThenBody(ctx.thenBody());
        Statement elsePart = visitElseBody(ctx.elseBody());
        Range range = getRange(ctx);
        return new If(condition, thenPart, elsePart, range);
    }

    @Override
    public Statement visitThenBody(ZenScriptParser.ThenBodyContext ctx) {
        if (ctx == null) return null;
        return visitStatement(ctx.statement());
    }

    @Override
    public Statement visitElseBody(ZenScriptParser.ElseBodyContext ctx) {
        if (ctx == null) return null;
        return visitStatement(ctx.statement());
    }

    @Override
    public Foreach visitForeachStatement(ZenScriptParser.ForeachStatementContext ctx) {
        if (ctx == null) return null;
        List<VariableDecl> variables = visitSimpleVariableDeclarations(ctx.simpleVariableDeclarations());
        Expression expr = visitExpression(ctx.expression());
        List<Statement> statements = visitForeachBody(ctx.foreachBody());
        Range range = getRange(ctx);
        return new Foreach(variables, expr, statements, range);
    }

    @Override
    public List<VariableDecl> visitSimpleVariableDeclarations(ZenScriptParser.SimpleVariableDeclarationsContext ctx) {
        if (ctx == null) return Collections.emptyList();
        return ctx.IDENTIFIER().stream().map(id -> {
            if (id == null) return null;
            Declarator declarator = Declarator.NONE;
            Name name = getName(id);
            Range range = getRange(id);
            return new VariableDecl(declarator, name, null, null, range);
        }).filter(Objects::nonNull).collect(Collectors.toList());
    }

    @Override
    public List<Statement> visitForeachBody(ZenScriptParser.ForeachBodyContext ctx) {
        if (ctx == null) return Collections.emptyList();
        return ctx.statement().stream().map(this::visitStatement).filter(Objects::nonNull).collect(Collectors.toList());
    }

    @Override
    public While visitWhileStatement(ZenScriptParser.WhileStatementContext ctx) {
        if (ctx == null) return null;
        Expression condition = visitExpression(ctx.expression());
        Statement statement = visitStatement(ctx.statement());
        Range range = getRange(ctx);
        return new While(condition, statement, range);
    }

    @Override
    public ExpressionStmt visitExpressionStatement(ZenScriptParser.ExpressionStatementContext ctx) {
        if (ctx == null) return null;
        Expression expr = visitExpression(ctx.expression());
        Range range = getRange(ctx);
        return new ExpressionStmt(expr, range);
    }

    public Expression visitExpression(ZenScriptParser.ExpressionContext ctx) {
        if (ctx == null) return null;
        return (Expression) ctx.accept(this);
    }

    @Override
    public Ternary visitTernaryExpr(ZenScriptParser.TernaryExprContext ctx) {
        if (ctx == null) return null;
        Expression condition = visitExpression(ctx.Condition);
        Expression truePart = visitExpression(ctx.TruePart);
        Expression falsePart = visitExpression(ctx.FalsePart);
        Range range = getRange(ctx);
        return new Ternary(condition, truePart, falsePart, range);
    }

    @Override
    public MemberAccess visitMemberAccessExpr(ZenScriptParser.MemberAccessExprContext ctx) {
        if (ctx == null) return null;
        Expression left = visitExpression(ctx.Left);
        Name right = getName(ctx.IDENTIFIER());
        Range range = getRange(ctx);
        return new MemberAccess(left, right, range);
    }

    @Override
    public MapLiteral visitMapLiteralExpr(ZenScriptParser.MapLiteralExprContext ctx) {
        if (ctx == null) return null;
        List<MapEntry> entries = visitMapEntryList(ctx.mapEntryList());
        Range range = getRange(ctx);
        return new MapLiteral(entries, range);
    }

    @Override
    public MapEntry visitMapEntry(ZenScriptParser.MapEntryContext ctx) {
        if (ctx == null) return null;
        Expression key = visitExpression(ctx.K);
        Expression value = visitExpression(ctx.V);
        Range range = getRange(ctx);
        return new MapEntry(key, value, range);
    }

    @Override
    public BracketHandler visitBracketHandlerExpr(ZenScriptParser.BracketHandlerExprContext ctx) {
        if (ctx == null) return null;
        String content = ctx.getText();
        Range range = getRange(ctx);
        return new BracketHandler(content, range);
    }

    @Override
    public ArrayLiteral visitArrayLiteralExpr(ZenScriptParser.ArrayLiteralExprContext ctx) {
        if (ctx == null) return null;
        List<Expression> elements = visitExpressionList(ctx.expressionList());
        Range range = getRange(ctx);
        return new ArrayLiteral(elements, range);
    }

    @Override
    public IntRange visitIntRangeExpr(ZenScriptParser.IntRangeExprContext ctx) {
        if (ctx == null) return null;
        Expression from = visitExpression(ctx.From);
        Expression to = visitExpression(ctx.To);
        Range range = getRange(ctx);
        return new IntRange(from, to, range);
    }

    @Override
    public List<Expression> visitExpressionList(ZenScriptParser.ExpressionListContext ctx) {
        if (ctx == null) return Collections.emptyList();
        return ctx.expression().stream().map(this::visitExpression).filter(Objects::nonNull).collect(Collectors.toList());
    }

    @Override
    public List<MapEntry> visitMapEntryList(ZenScriptParser.MapEntryListContext ctx) {
        if (ctx == null) return Collections.emptyList();
        return ctx.mapEntry().stream().map(this::visitMapEntry).filter(Objects::nonNull).collect(Collectors.toList());
    }

    public TypeLiteral visitTypeLiteral(ZenScriptParser.TypeLiteralContext ctx) {
        if (ctx == null) return null;
        return (TypeLiteral) ctx.accept(this);
    }

    @Override
    public Call visitCallExpr(ZenScriptParser.CallExprContext ctx) {
        if (ctx == null) return null;
        Expression left = visitExpression(ctx.Left);
        List<Expression> params = visitExpressionList(ctx.expressionList());
        Range range = getRange(ctx);
        return new Call(left, params, range);
    }

    @Override
    public ArrayAccess visitArrayIndexExpr(ZenScriptParser.ArrayIndexExprContext ctx) {
        if (ctx == null) return null;
        Expression left = visitExpression(ctx.Left);
        Expression index = visitExpression(ctx.Index);
        Range range = getRange(ctx);
        return new ArrayAccess(left, index, range);
    }

    @Override
    public FunctionExpr visitFunctionExpr(ZenScriptParser.FunctionExprContext ctx) {
        if (ctx == null) return null;
        List<ParameterDecl> params = visitParameterList(ctx.parameterList());
        TypeLiteral typeDecl = visitTypeLiteral(ctx.typeLiteral());
        List<Statement> statements = visitFunctionBody(ctx.functionBody());
        Range range = getRange(ctx);
        return new FunctionExpr(params, typeDecl, statements, range);
    }

    @Override
    public Binary visitBinaryExpr(ZenScriptParser.BinaryExprContext ctx) {
        if (ctx == null) return null;
        Expression left = visitExpression(ctx.Left);
        Expression right = visitExpression(ctx.Right);
        Binary.Operator op = getBinaryOp(ctx.Op);
        Range range = getRange(ctx);
        return new Binary(left, right, op, range);
    }

    @Override
    public Assignment visitAssignmentExpr(ZenScriptParser.AssignmentExprContext ctx) {
        if (ctx == null) return null;
        Expression left = visitExpression(ctx.Left);
        Expression right = visitExpression(ctx.Right);
        Assignment.Operator op = getAssignOp(ctx.Op);
        Range range = getRange(ctx);
        return new Assignment(left, right, op, range);
    }

    @Override
    public Unary visitUnaryExpr(ZenScriptParser.UnaryExprContext ctx) {
        if (ctx == null) return null;
        Expression expr = visitExpression(ctx.expression());
        Unary.Operator op = getUnaryOp(ctx.Op);
        Range range = getRange(ctx);
        return new Unary(expr, op, range);
    }

    @Override
    public Parens visitParensExpr(ZenScriptParser.ParensExprContext ctx) {
        if (ctx == null) return null;
        Expression expr = visitExpression(ctx.expression());
        Range range = getRange(ctx);
        return new Parens(expr, range);
    }

    @Override
    public This visitThisExpr(ZenScriptParser.ThisExprContext ctx) {
        if (ctx == null) return null;
        Range range = getRange(ctx);
        return new This(range);
    }

    @Override
    public ConstantExpr visitTrueExpr(ZenScriptParser.TrueExprContext ctx) {
        if (ctx == null) return null;
        Range range = getRange(ctx);
        return new ConstantExpr(Boolean.TRUE, Type.Tag.BOOL, range);
    }

    @Override
    public ConstantExpr visitFalseExpr(ZenScriptParser.FalseExprContext ctx) {
        if (ctx == null) return null;
        Range range = getRange(ctx);
        return new ConstantExpr(Boolean.FALSE, Type.Tag.BOOL, range);
    }

    @Override
    public ConstantExpr visitStringExpr(ZenScriptParser.StringExprContext ctx) {
        if (ctx == null) return null;
        String value = ctx.getText();
        Range range = getRange(ctx);
        return new ConstantExpr(value, Type.Tag.STRING, range);
    }

    @Override
    public ConstantExpr visitNullExpr(ZenScriptParser.NullExprContext ctx) {
        if (ctx == null) return null;
        Range range = getRange(ctx);
        return new ConstantExpr(null, Type.Tag.ANY, range);
    }

    @Override
    public ConstantExpr visitIntExpr(ZenScriptParser.IntExprContext ctx) {
        if (ctx == null) return null;
        Integer value = Integer.decode(ctx.getText());
        Range range = getRange(ctx);
        return new ConstantExpr(value, Type.Tag.INT, range);
    }

    @Override
    public ConstantExpr visitDoubleExpr(ZenScriptParser.DoubleExprContext ctx) {
        if (ctx == null) return null;
        Double value = Double.valueOf(ctx.getText());
        Range range = getRange(ctx);
        return new ConstantExpr(value, Type.Tag.DOUBLE, range);
    }

    @Override
    public ConstantExpr visitFloatExpr(ZenScriptParser.FloatExprContext ctx) {
        if (ctx == null) return null;
        Float value = Float.valueOf(ctx.getText());
        Range range = getRange(ctx);
        return new ConstantExpr(value, Type.Tag.FLOAT, range);
    }

    @Override
    public ConstantExpr visitLongExpr(ZenScriptParser.LongExprContext ctx) {
        if (ctx == null) return null;
        Long value = Long.decode(ctx.getText());
        Range range = getRange(ctx);
        return new ConstantExpr(value, Type.Tag.LONG, range);
    }

    @Override
    public IDExpr visitIDExpr(ZenScriptParser.IDExprContext ctx) {
        if (ctx == null) return null;
        Name name = getName(ctx.IDENTIFIER());
        Range range = getRange(ctx);
        return new IDExpr(name, range);
    }

    @Override
    public TypeCast visitTypeCastExpr(ZenScriptParser.TypeCastExprContext ctx) {
        if (ctx == null) return null;
        Expression expr = visitExpression(ctx.expression());
        TypeLiteral type = visitTypeLiteral(ctx.typeLiteral());
        Range range = getRange(ctx);
        return new TypeCast(expr, type, range);
    }

    @Override
    public TypeLiteral visitArrayType(ZenScriptParser.ArrayTypeContext ctx) {
        if (ctx == null) return null;
        Type elementType = getType(ctx.typeLiteral());
        ArrayType type = new ArrayType(elementType);
        Range range = getRange(ctx);
        return new TypeLiteral(type, range);
    }

    @Override
    public TypeLiteral visitFunctionType(ZenScriptParser.FunctionTypeContext ctx) {
        if (ctx == null) return null;
        List<Type> paramTypes = getTypeList(ctx.typeLiteralList());
        Type returnType = getType(ctx.typeLiteral());
        Type type = new FunctionType(paramTypes, returnType);
        Range range = getRange(ctx);
        return new TypeLiteral(type, range);
    }

    @Override
    public TypeLiteral visitListType(ZenScriptParser.ListTypeContext ctx) {
        if (ctx == null) return null;
        Type e = getType(ctx.typeLiteral());
        Type type = new ListType(e);
        Range range = getRange(ctx);
        return new TypeLiteral(type, range);
    }

    @Override
    public TypeLiteral visitPrimitiveType(ZenScriptParser.PrimitiveTypeContext ctx) {
        if (ctx == null) return null;
        Type.Tag tag;
        switch (ctx.start.getType()) {
            case ZenScriptLexer.ANY:
                tag = Type.Tag.ANY;
                break;

            case ZenScriptLexer.BYTE:
                tag = Type.Tag.BYTE;
                break;

            case ZenScriptLexer.SHORT:
                tag = Type.Tag.SHORT;
                break;

            case ZenScriptLexer.INT:
                tag = Type.Tag.INT;
                break;

            case ZenScriptLexer.LONG:
                tag = Type.Tag.LONG;
                break;

            case ZenScriptLexer.FLOAT:
                tag = Type.Tag.FLOAT;
                break;

            case ZenScriptLexer.DOUBLE:
                tag = Type.Tag.DOUBLE;
                break;

            case ZenScriptLexer.BOOL:
                tag = Type.Tag.BOOL;
                break;

            case ZenScriptLexer.VOID:
                tag = Type.Tag.VOID;
                break;

            case ZenScriptLexer.STRING:
                tag = Type.Tag.STRING;
                break;

            default:
                tag = Type.Tag.NO_TAG;
        }
        Type type = (tag != Type.Tag.NO_TAG) ? new PrimitiveType(tag) : NoType.INSTANCE;
        Range range = getRange(ctx);
        return new TypeLiteral(type, range);
    }

    @Override
    public TypeLiteral visitClassType(ZenScriptParser.ClassTypeContext ctx) {
        if (ctx == null) return null;
        // TODO
        Range range = getRange(ctx);
        return new TypeLiteral(NoType.INSTANCE, range);
    }

    @Override
    public TypeLiteral visitMapType(ZenScriptParser.MapTypeContext ctx) {
        if (ctx == null) return null;
        Type k = getType(ctx.K);
        Type v = getType(ctx.V);
        Type type = new MapType(k, v);
        Range range = getRange(ctx);
        return new TypeLiteral(type, range);
    }

    @Override
    public List<TypeLiteral> visitTypeLiteralList(ZenScriptParser.TypeLiteralListContext ctx) {
        if (ctx == null) return Collections.emptyList();
        return ctx.typeLiteral().stream().map(this::visitTypeLiteral).filter(Objects::nonNull).collect(Collectors.toList());
    }

}
